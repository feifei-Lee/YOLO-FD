# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80  # number of classes
scales:  # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]  # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  s: [0.33, 0.50, 1024]  # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  m: [0.67, 0.75, 768]   # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [1.00, 1.00, 512]   # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  x: [1.00, 1.25, 512]   # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]]  # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 1-P2/4
  - [-1, 3, C2f, [128, True]]
  - [-1, 1, Conv, [256, 3, 2]]  # 3-P3/8
  - [-1, 6, C2f, [256, True]]
  - [-1, 1, Conv, [512, 3, 2]]  # 5-P4/16
  - [-1, 6, C2f, [512, True]]
  - [-1, 1, Conv, [1024, 3, 2]]  # 7-P5/32
  - [-1, 3, C2f, [1024, True]]
  - [-1, 1, SPPF, [1024, 5]]  # 9

# YOLOv8.0n head
head:
  - [[2, 4, 6, 9], 1, SimFusion_4in, []] #10
  - [-1, 1, IFM, [[64,32]]] #11

  - [[4, 6, 9], 1, SimFusion_3in_bottom, [1024]] #12
  - [[-1, 11], 1, InjectionMultiSum_Auto_pool, [512, [64, 32], 0]] # 13

  - [[2, 4, 6], 1, SimFusion_3in,[256]] #14
  - [[-1, 11], 1, InjectionMultiSum_Auto_pool, [128, [64, 32],1]] #15

  - [13, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 6], 1, Concat, [1]]  # cat backbone P4
  - [-1, 3, C2f, [512]]  # 18

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 15], 1, Concat, [1]]  # cat backbone P3
  - [-1, 3, C2f, [256]]  # 21 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 18], 1, Concat, [1]]  # cat head P4
  - [-1, 3, C2f, [512]]  # 24 (P4/16-medium)

  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 13], 1, Concat, [1]]  # cat head P5
  - [-1, 3, C2f, [1024]]  # 27 (P5/32-large)

  - [[21, 24, 27], 1, Detect, [nc]]  #28 Detect(P3, P4, P5)

# segment head # æ­¤å¤„çš„segnc = dataset.yaml[segnc]+1
segnc: 21
segnc2: 21

segHead:
  # [from, repeats, module, args]
  - [ 20, 1, Conv, [384, 3, 1]]   #29  /8
  - [ -1, 1, nn.Upsample, [None, 2, 'nearest']]  #30 /4
  - [ -1, 1, C2f, [256]]  #31
  - [ -1, 1, Conv, [128, 3, 1]]    #32
  - [ -1, 1, nn.Upsample, [None, 2, 'nearest']]  #33 /2
  - [ -1, 1, Conv, [64, 3, 1]]    #34
  - [ -1, 1, C2f, [64]]    #35
  - [ -1, 1, nn.Upsample, [None, 2, 'nearest']]  #36 /1
  - [ -1, 1, nn.Conv2d, [80, 3, 1, 1]] #37 segmentation head

#segHead2:
#  # [from, repeats, module, args]
#  - [ 22, 1, Conv, [384, 3, 1]]   #40  /8
#  - [ -1, 1, ConvTranspose, [384]]  #41 /4
#  - [[-1, 33], 1, Concat, [1]]  #42
#  - [ -1, 1, C2f, [256]]  #43
#  - [ -1, 1, Conv, [128, 3, 1]]    #44
#  - [ -1, 1, ConvTranspose, [128]]  #45 /2
#  - [ -1, 1, Conv, [64, 3, 1]]    #46
#  - [[-1, 37], 1, Concat, [1]]  #47
#  - [ -1, 1, C2f, [64]]    #48
#  - [ -1, 1, ConvTranspose, [64]]  #49 /1
#  - [ -1, 1, nn.Conv2d, [80, 3, 1, 1]] #50 segmentation head

#segHead2:
#  # [from, repeats, module, args]
#  - [ 14, 1, Conv, [384, 3, 1]]   #32  /8
#  - [ -1, 1, nn.Upsample, [None, 2, 'nearest']]  #33 /4
#  - [[-1, 25], 1, Concat, [1]]  #34
#  - [ -1, 1, C2f, [256]]  #35
#  - [ -1, 1, Conv, [128, 3, 1]]    #36
#  - [ -1, 1, nn.Upsample, [None, 2, 'nearest']]  #37 /2
#  - [ -1, 1, Conv, [64, 3, 1]]    #38
#  - [[-1, 29], 1, Concat, [1]]  #39
#  - [ -1, 1, C2f, [64]]    #40
#  - [ -1, 1, nn.Upsample, [None, 2, 'nearest']]  #41 /1
#  - [ -1, 1, nn.Conv2d, [80, 3, 1, 1]] #42 segmentation head

#segHead2:
#  # [from, repeats, module, args]
#  - [ 14, 1, Conv, [384, 3, 1]]   #32  /8
#  - [ -1, 1, nn.Upsample, [None, 2, 'nearest']]  #33 /4
#  - [ -1, 1, C2f, [256]]  #34
#  - [ -1, 1, Conv, [128, 3, 1]]    #35
#  - [ -1, 1, nn.Upsample, [None, 2, 'nearest']]  #36 /2
#  - [ -1, 1, Conv, [64, 3, 1]]    #37
#  - [ -1, 1, C2f, [64]]    #38
#  - [ -1, 1, nn.Upsample, [None, 2, 'nearest']]  #39 /1
#  - [ -1, 1, nn.Conv2d, [80, 3, 1, 1]] #40 segmentation head
